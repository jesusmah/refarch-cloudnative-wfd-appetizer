podTemplate(label: 'mypod',
    volumes: [
        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')
    ],
    containers: [
        containerTemplate(name: 'maven', image: 'maven:3.5.2-alpine', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'docker' , image: 'docker:17.11.0-ce', ttyEnabled: true, command: 'cat')
  ]) {

  node("mypod") {
    def app

    stage('Check CI/CD parameters') {
    /* Check if the needed CI/CD parameters have been provided */

      sh """
      #!/bin/bash
      if [ "${params.release_name}" = "null" ]; then
        echo "[ERROR]: A release name has not been declared. Please declare a release name in your Jenkins release_name pipeline variable"
        exit 1
      fi
      """
    }

    stage('Clone repository') {
        /* Let's make sure we have the repository cloned to our workspace */

        checkout scm
    }

    stage('Read CI/CD configuration') {
    /* Read the CI/CD configuration from pipeline params of defaults */

      sh """
      #!/bin/bash

      source devops/ICP/values.properties

      # If values are not declared by the user for the following variables, default values will be chosen.
      if [ "${params.docker_registry}" != "null" ]; then
        DOCKER_REGISTRY=${params.docker_registry}
      fi
      if [ "${params.namespace}" != "null" ]; then
        NAMESPACE=${params.namespace}
      fi
      if [ "${params.artifactory_url}" != "null" ]; then
        ARTIFACTORY_URL=${params.artifactory_url}
      fi
      echo ${DOCKER_REGISTRY}
      echo ${NAMESPACE}
      echo ${ARTIFACTORY_URL}
      exit 1
      """
    }

    container("maven") {
      stage('Compile code') {
        sh """
        #!/bin/bash
        if [ -n "${ARTIFACTORY_URL}" ]; then
          sed -i -- 's/ARTIFACTORY_URL_PLACEHOLDER/${ARTIFACTORY_URL}/g' artifactory_settings.xml
          mv artifactory_settings.xml /root/.m2/settings.xml
        fi
        exit 1
        mvn clean package
        """
      }
    }

    container("docker") {
      stage('Build image') {
        sh """
        #!/bin/bash

        docker build -t ${DOCKER_REGISTRY}/${NAMESPACE}/wfd-appetizer-spring:${env.BUILD_NUMBER} .
        """

      }

      stage('Push image') {
        withCredentials([usernamePassword(credentialsId: 'icp_credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
          sh """
          #!/bin/bash

          set +x
          docker login -u=${USERNAME} -p=${PASSWORD} ${DOCKER_REGISTRY}
          set -x

          docker push ${DOCKER_REGISTRY}/${NAMESPACE}/wfd-appetizer-spring:${env.BUILD_NUMBER}
          """
        }
      }
    }
    container("kubectl") {
      stage('Deploy application') {
        sh """
          #!/bin/bash

          DEPLOYMENT=`kubectl get deployments | grep ${params.release_name} | grep wfd-appetizer | awk '{print \$1}'`

          # Update Deployment
          kubectl set image deployment/\${DEPLOYMENT} wfd-appetizer=${DOCKER_REGISTRY}/${NAMESPACE}/wfd-appetizer-spring:${env.BUILD_NUMBER}
          kubectl rollout status deployment/\${DEPLOYMENT}
        """
      }
    }
  }
}
